<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terministrator</name>
    </assembly>
    <members>
        <member name="T:Terministrator.Application.DiscordApplication.Channel">
            <summary>
            Implement the channel interface for Discord.
            </summary>
            <seealso cref="T:Terministrator.Application.Interface.IChannel" />
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Channel.#ctor(DiscordSharp.Objects.DiscordChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Application.DiscordApplication.Channel"/> class.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Channel.#ctor(DiscordSharp.Objects.DiscordPrivateChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Application.DiscordApplication.Channel"/> class.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Channel.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>
            The application identifier
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Channel.GetApplication">
            <summary>
            Gets the application.
            </summary>
            <returns>
            The application
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Channel.GetFirstName">
            <summary>
            Gets the first name.
            </summary>
            <returns>
            The first name
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Channel.GetLastName">
            <summary>
            Gets the last name.
            </summary>
            <returns>
            The last name
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Channel.GetUsername">
            <summary>
            Gets the username.
            </summary>
            <returns>
            The username
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Channel.IsSolo">
            <summary>
            Determines whether this instance is a private channel.
            </summary>
            <returns>
              <c>true</c> if this instance is a private channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Terministrator.Application.DiscordApplication.Application">
            <summary>
            Implement the application interface for Discord. Used to discuss with Discord's API.
            </summary>
            <seealso cref="T:Terministrator.Application.Interface.IApplication" />
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Terministrator.Application.DiscordApplication.Application"/> class from being created.
            </summary>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.GetApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
            <returns>A <see cref="T:System.String"/> with the value "DISCORD"</returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.SetMessageDestination(System.Action{Terministrator.Application.Interface.IMessage})">
            <summary>
            Sets the message destination.
            </summary>
            <param name="receivedMessage">The received message method.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.GetTerministrator">
            <summary>
            Gets the terministrator.
            </summary>
            <returns>
            Gets the user Terministrator on Discord.
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.SendMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <returns>
            A task containing the ID of the message sent.
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.EditMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Edits the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.Kick(Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel)">
            <summary>
            Kicks the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.CanKick(Terministrator.Application.Interface.IChannel)">
            <summary>
            Determines whether this instance can kick the specified user.
            </summary>
            <param name="channel">The channel.</param>
            <returns>
              <c>true</c> if this instance can kick the specified user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.GetMods(Terministrator.Application.Interface.IChannel)">
            <summary>
            Gets the mods of the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>
            A collection of user which are moderators.
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.Ping(System.Nullable{System.TimeSpan})">
            <summary>
            Pings the application.
            </summary>
            <param name="max">The maximum time a ping can take. 5s by default.</param>
            <returns>
            The time necessary to ping. Null if no connection.
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.GetCommandSymbol">
            <summary>
            Gets the command symbol.
            </summary>
            <returns>
            The command symbol.
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.GetUserSymbol">
            <summary>
            Gets the user symbol.
            </summary>
            <returns>
            The user symbol.
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.MessageReceived(System.Object,DiscordSharp.Events.DiscordMessageEventArgs)">
            <summary>
            Called when Discord sends us a message.
            </summary>
            <param name="o">The o.</param>
            <param name="args">The <see cref="T:DiscordSharp.Events.DiscordMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Application.PrivateMessageReceived(System.Object,DiscordSharp.DiscordPrivateMessageEventArgs)">
            <summary>
            Called when Discord sends us a private message.
            </summary>
            <param name="o">The o.</param>
            <param name="args">The <see cref="T:DiscordSharp.DiscordPrivateMessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Terministrator.Application.DiscordApplication.Message">
            <summary>
            Implement the application interface for Discord.
            </summary>
            <seealso cref="T:Terministrator.Application.Interface.IMessage" />
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.#ctor(DiscordSharp.Events.DiscordMessageEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Application.DiscordApplication.Message"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.#ctor(DiscordSharp.DiscordPrivateMessageEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Application.DiscordApplication.Message"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>
            The application identifier
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.GetFrom">
            <summary>
            Gets the author of the message.
            </summary>
            <returns>
            The author
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.GetChannel">
            <summary>
            Gets the channel.
            </summary>
            <returns>
            The channel
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.GetSentDate">
            <summary>
            Gets the sent date.
            </summary>
            <returns>
            The sent date
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.GetText">
            <summary>
            Gets the text.
            </summary>
            <returns>
            The text
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.GetRepliesTo">
            <summary>
            Gets the message replied by this one.
            </summary>
            <returns>
            The message being replied to
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.Message.GetJoinedUser">
            <summary>
            Gets the joined user.
            </summary>
            <returns>
            The joinded user
            </returns>
        </member>
        <member name="T:Terministrator.Application.DiscordApplication.User">
            <summary>
            Implement the user interface for Discord.
            </summary>
            <seealso cref="T:Terministrator.Application.Interface.IUser" />
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.User.#ctor(DiscordSharp.Objects.DiscordMember)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Application.DiscordApplication.User"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.User.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>
            The application identifier
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.User.GetFirstName">
            <summary>
            Gets the first name.
            </summary>
            <returns>
            The first name
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.User.GetLastName">
            <summary>
            Gets the last name.
            </summary>
            <returns>
            The last name
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.User.GetUsername">
            <summary>
            Gets the username.
            </summary>
            <returns>
            The username
            </returns>
        </member>
        <member name="M:Terministrator.Application.DiscordApplication.User.GetApplication">
            <summary>
            Gets the application.
            </summary>
            <returns>
            The application
            </returns>
        </member>
        <member name="T:Terministrator.Application.Interface.ApplicationFactory">
            <summary>
            Gives access to every single application at the same place. Should be deleted in a future upgrade.
            </summary>
        </member>
        <member name="P:Terministrator.Application.Interface.ApplicationFactory.Applications">
            <summary>
            Gets the applications.
            </summary>
            <value>
            The applications.
            </value>
        </member>
        <member name="M:Terministrator.Application.Interface.ApplicationFactory.Get(Terministrator.Application.Interface.ApplicationFactory.Application)">
            <summary>
            Gets the specified application.
            </summary>
            <param name="app">The application.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Application.Interface.ApplicationFactory.Get(System.String)">
            <summary>
            Gets the specified application.
            </summary>
            <param name="app">The application's name.</param>
            <returns></returns>
        </member>
        <member name="T:Terministrator.Application.Interface.IApplication">
            <summary>
            Black box giving the possibility to add as many applications as wanted, sended to Core.
            </summary>
        </member>
        <member name="P:Terministrator.Application.Interface.IApplication.Token">
            <summary>
            Gets or sets the token used to connect with the bots.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.GetCommandSymbol">
            <summary>
            Gets the command symbol.
            </summary>
            <returns>The command symbol.</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.GetUserSymbol">
            <summary>
            Gets the user symbol.
            </summary>
            <returns>The user symbol.</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.GetApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
            <returns>The name of the application.</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.SetMessageDestination(System.Action{Terministrator.Application.Interface.IMessage})">
            <summary>
            Sets the message destination.
            </summary>
            <param name="receivedMessage">The received message method.</param>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.SendMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <returns>A task containing the ID of the message sent.</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.EditMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Edits the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.GetTerministrator">
            <summary>
            Gets the terministrator.
            </summary>
            <returns>Gets the user Terministrator on the application.</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.CanKick(Terministrator.Application.Interface.IChannel)">
            <summary>
            Determines whether this instance can kick the specified user.
            </summary>
            <param name="channel">The channel.</param>
            <returns>
              <c>true</c> if this instance can kick the specified user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.Kick(Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel)">
            <summary>
            Kicks the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.GetMods(Terministrator.Application.Interface.IChannel)">
            <summary>
            Gets the mods of the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>A collection of user which are moderators.</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IApplication.Ping(System.Nullable{System.TimeSpan})">
            <summary>
            Pings the application.
            </summary>
            <param name="max">The maximum time a ping can take.</param>
            <returns>The time necessary to ping. Null if no connection.</returns>
        </member>
        <member name="T:Terministrator.Application.Interface.IChannel">
            <summary>
            Interface of what a channel should implement for the Core.
            </summary>
        </member>
        <member name="M:Terministrator.Application.Interface.IChannel.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>The application identifier</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IChannel.GetApplication">
            <summary>
            Gets the application.
            </summary>
            <returns>The application</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IChannel.GetFirstName">
            <summary>
            Gets the first name.
            </summary>
            <returns>The first name</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IChannel.GetLastName">
            <summary>
            Gets the last name.
            </summary>
            <returns>The last name</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IChannel.GetUsername">
            <summary>
            Gets the username.
            </summary>
            <returns>The username</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IChannel.IsSolo">
            <summary>
            Determines whether this instance is a private channel.
            </summary>
            <returns>
              <c>true</c> if this instance is a private channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Terministrator.Application.Interface.IMessage">
            <summary>
            Interface of what a message should implement for the Core.
            </summary>
        </member>
        <member name="M:Terministrator.Application.Interface.IMessage.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>The application identifier</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IMessage.GetFrom">
            <summary>
            Gets the author of the message.
            </summary>
            <returns>The author</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IMessage.GetChannel">
            <summary>
            Gets the channel.
            </summary>
            <returns>The channel</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IMessage.GetSentDate">
            <summary>
            Gets the sent date.
            </summary>
            <returns>The sent date</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IMessage.GetText">
            <summary>
            Gets the text.
            </summary>
            <returns>The text</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IMessage.GetRepliesTo">
            <summary>
            Gets the message replied by this one.
            </summary>
            <returns>The message being replied to</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IMessage.GetJoinedUser">
            <summary>
            Gets the joined user.
            </summary>
            <returns>The joinded user</returns>
        </member>
        <member name="T:Terministrator.Application.Interface.IUser">
            <summary>
            Interface of what a user should implement for the Core.
            </summary>
        </member>
        <member name="M:Terministrator.Application.Interface.IUser.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>The application identifier</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IUser.GetFirstName">
            <summary>
            Gets the first name.
            </summary>
            <returns>The first name</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IUser.GetLastName">
            <summary>
            Gets the last name.
            </summary>
            <returns>The last name</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IUser.GetUsername">
            <summary>
            Gets the username.
            </summary>
            <returns>The username</returns>
        </member>
        <member name="M:Terministrator.Application.Interface.IUser.GetApplication">
            <summary>
            Gets the application.
            </summary>
            <returns>The application</returns>
        </member>
        <member name="T:Terministrator.Application.TelegramApplication.Channel">
            <summary>
            Implement the channel interface for Telegram.
            </summary>
            <seealso cref="T:Terministrator.Application.Interface.IChannel" />
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Channel.#ctor(Telegram.Bot.Types.Chat)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Application.TelegramApplication.Channel"/> class.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Channel.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>
            The application identifier
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Channel.GetApplication">
            <summary>
            Gets the application.
            </summary>
            <returns>
            The application
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Channel.GetFirstName">
            <summary>
            Gets the first name.
            </summary>
            <returns>
            The first name
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Channel.GetLastName">
            <summary>
            Gets the last name.
            </summary>
            <returns>
            The last name
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Channel.IsSolo">
            <summary>
            Determines whether this instance is a private channel.
            </summary>
            <returns>
              <c>true</c> if this instance is a private channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Channel.GetUsername">
            <summary>
            Gets the username.
            </summary>
            <returns>
            The username
            </returns>
        </member>
        <member name="T:Terministrator.Application.TelegramApplication.Application">
            <summary>
            Implement the application interface for Telegram. Used to discuss with Discord's API.
            </summary>
            <seealso cref="T:Terministrator.Application.Interface.IApplication" />
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Terministrator.Application.TelegramApplication.Application"/> class from being created.
            </summary>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.GetApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
            <returns>A <see cref="T:System.String"/> with the value "TELEGRAM 1.0.6"</returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.SetMessageDestination(System.Action{Terministrator.Application.Interface.IMessage})">
            <summary>
            Sets the message destination.
            </summary>
            <param name="receivedMessage">The received message method.</param>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.GetTerministrator">
            <summary>
            Gets the user Terministrator on Telegram.
            </summary>
            <returns>Terministrator</returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.SendMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <returns>A task containing the ID of the message sent for Telegram.</returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.EditMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Edits the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.CanKick(Terministrator.Application.Interface.IChannel)">
            <summary>
            Determines whether this instance can kick in the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>
              <c>true</c> if this instance can kick in the specified channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.Kick(Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel)">
            <summary>
            Kicks the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.GetMods(Terministrator.Application.Interface.IChannel)">
            <summary>
            Gets the mods of the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>A collection of user which are moderators.</returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.Ping(System.Nullable{System.TimeSpan})">
            <summary>
            Pings Telegram.
            </summary>
            <param name="max">The maximum time a ping can take. 5s by default.</param>
            <returns>The time necessary to ping. Null if no connection.</returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.GetCommandSymbol">
            <summary>
            Gets the command symbol. Example: /help.
            </summary>
            <returns>The command symbol.</returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.GetUserSymbol">
            <summary>
            Gets the user symbol. Example: @Terministrator.
            </summary>
            <returns>The user symbol.</returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Application.MessageReceived(System.Object,Telegram.Bot.Args.MessageEventArgs)">
            <summary>
            Called when Telegram sends us a message.
            </summary>
            <param name="o">The o.</param>
            <param name="args">The <see cref="T:Telegram.Bot.Args.MessageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Terministrator.Application.TelegramApplication.Message">
            <summary>
            Implement the message interface for Telegram.
            </summary>
            <seealso cref="T:Terministrator.Application.Interface.IMessage" />
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Message.#ctor(Telegram.Bot.Types.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Application.TelegramApplication.Message"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Message.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>
            The application identifier
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Message.GetFrom">
            <summary>
            Gets the author of the message.
            </summary>
            <returns>
            The author
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Message.GetChannel">
            <summary>
            Gets the channel.
            </summary>
            <returns>
            The channel
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Message.GetSentDate">
            <summary>
            Gets the sent date.
            </summary>
            <returns>
            The sent date
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Message.GetText">
            <summary>
            Gets the text.
            </summary>
            <returns>
            The text
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Message.GetJoinedUser">
            <summary>
            Gets the joined user.
            </summary>
            <returns>
            The joinded user
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.Message.GetRepliesTo">
            <summary>
            Gets the message this instance replies to.
            </summary>
            <returns>The requested message.</returns>
        </member>
        <member name="T:Terministrator.Application.TelegramApplication.User">
            <summary>
            Implement the user interface for Telegram.
            </summary>
            <seealso cref="T:Terministrator.Application.Interface.IUser" />
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.User.#ctor(Telegram.Bot.Types.User)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Application.TelegramApplication.User"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.User.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>
            The application identifier
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.User.GetFirstName">
            <summary>
            Gets the first name.
            </summary>
            <returns>
            The first name
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.User.GetLastName">
            <summary>
            Gets the last name.
            </summary>
            <returns>
            The last name
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.User.GetUsername">
            <summary>
            Gets the username.
            </summary>
            <returns>
            The username
            </returns>
        </member>
        <member name="M:Terministrator.Application.TelegramApplication.User.GetApplication">
            <summary>
            Gets the application.
            </summary>
            <returns>
            The application
            </returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.Ad">
            <summary>
            Business logic layer of the ads. Implements the chat commands and the functions to send the ads following an interval.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Ad.Get(System.Int32)">
            <summary>
            Gets the specified ad.
            </summary>
            <param name="adId">The ad identifier.</param>
            <returns>The requested ad.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Ad.Create(Terministrator.Terministrator.Entites.Ad)">
            <summary>
            Creates the specified ad.
            </summary>
            <param name="ad">The ad.</param>
            <returns>The newly created ad.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Ad.Update(Terministrator.Terministrator.Entites.Ad)">
            <summary>
            Updates the specified ad.
            </summary>
            <param name="ad">The ad.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Ad.AddAd(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Mod command. Add a new ad to repeat on the channel following the ad system's settings.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Ad.SendAd(System.Timers.Timer,System.Int32)">
            <summary>
            Sends the requested ad.
            </summary>
            <param name="timer">The timer calling this function.</param>
            <param name="adId">The ad identifier.</param>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.AdSystem">
            <summary>
            Business logic layer of the adsystems. Implements the chat command to set them.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.AdSystem.Exists(System.Int32)">
            <summary>
            Tells if the specified ad system exists in the database.
            </summary>
            <param name="adSystemId">The ad system identifier.</param>
            <returns><c>true</c> if it exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.AdSystem.Exists(Terministrator.Terministrator.Entites.AdSystem)">
            <summary>
            Tells if the specified ad system exists in the database.
            </summary>
            <param name="adSystem">The ad system.</param>
            <returns><c>true</c> if it exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.AdSystem.UpdateOrCreate(Terministrator.Terministrator.Entites.AdSystem)">
            <summary>
            Updates or create the ad system.
            </summary>
            <param name="adSystem">The ad system.</param>
            <returns>The updated/created ad system.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.AdSystem.Create(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Creates the specified ad system.
            </summary>
            <param name="channel">The channel to create an ad system for.</param>
            <returns>The newly created ad system.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.AdSystem.Update(Terministrator.Terministrator.Entites.AdSystem)">
            <summary>
            Updates the specified ad system.
            </summary>
            <param name="adSystem">The ad system.</param>
            <returns>The same ad system.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.AdSystem.SetAdSystem(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Mod command. Sets the ad system for this channel.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.MessageTypeToPointSystem">
            <summary>
            Business logic layer of the message type to point systems. Let a moderator set the rewards when an user send a message of a type.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageTypeToPointSystem.Create(Terministrator.Terministrator.Entites.PointSystem,Terministrator.Terministrator.Entites.MessageType,System.Single)">
            <summary>
            Creates the specified point system.
            </summary>
            <param name="pointSystem">The point system.</param>
            <param name="messageType">Type of the message.</param>
            <param name="reward">The reward.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageTypeToPointSystem.Create(Terministrator.Terministrator.Entites.MessageTypeToPointSystem)">
            <summary>
            Creates the specified message type to point system.
            </summary>
            <param name="messageTypeToPointSystem">The message type to point system.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageTypeToPointSystem.GetAll(System.Int32)">
            <summary>
            Gets all.
            </summary>
            <param name="pointSystemId">The point system identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageTypeToPointSystem.DeleteAllFrom(System.Int32)">
            <summary>
            Deletes all the amounts between a point system and a message type.
            </summary>
            <param name="pointSystemId">The point system identifier.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageTypeToPointSystem.SetAmounts(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Sets the amounts between the different message types and the point system.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageTypeToPointSystem.ReadArray(System.String[],System.Collections.Generic.List{System.Tuple{System.String,System.Single}}@)">
            <summary>
            Reads the array for the SetAmounts function.
            </summary>
            <param name="amounts">The amounts.</param>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.PointSystem">
            <summary>
            Business logic layer of the point systems. Currently doesn't do much other than creating them.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.PointSystem.Create(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Creates a default point system for the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The created point system.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.Privileges">
            <summary>
            Business logic layer of the privileges. Let a moderator create and rename privileges and gives default privileges (User and Mod).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Privileges.Create(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Creates the default privileges comming with a new channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>A collection of the default privileges.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Privileges.GetDefaultUser(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Gets the default privileges group from that channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The requested privileges group.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Privileges.GetNewUser(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Gets a new default user privileges group.
            </summary>
            <param name="channel">The channel where this will be in.</param>
            <returns>The requested privileges.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Privileges.GetNewMod(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Gets a new default mod privileges group.
            </summary>
            <param name="channel">The channel where this will be in.</param>
            <returns>The requested privileges.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Privileges.GetPrivileges(Terministrator.Terministrator.Entites.Channel,System.String)">
            <summary>
            Gets a specific privileges group in a channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="name">The name.</param>
            <returns>The requested privileges.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Privileges.RenamePrivileges(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Mod command. Renames the privileges group to an unused name.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Privileges.AddPrivileges(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Mod command. Adds a new privileges group.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.Rules">
            <summary>
            Business logic layer of the rules. Applies the rules on each received messages. Also let a moderator edits specified rules.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.ReceivedMessage(Terministrator.Terministrator.Entites.Message,System.Boolean)">
            <summary>
            Apply the rules on a newly received message.
            </summary>
            <param name="message">The message.</param>
            <param name="isCommand">If the message was recognized as a command.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.ApplySpamDelay(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Applies the spam delay. If the delay wasn't respected, <see cref="M:Terministrator.Terministrator.BLL.Rules.Fail(Terministrator.Terministrator.Entites.Message,System.String)"/> them.
            </summary>
            <param name="message">The message to analyze.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.ApplyBlockedWords(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Applies the blocked words filter. If a blocked word is found in the message, <see cref="M:Terministrator.Terministrator.BLL.Rules.Fail(Terministrator.Terministrator.Entites.Message,System.String)"/> them.
            </summary>
            <param name="message">The message to analyze.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.ApplyR9K(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Applies the r9k filter. If a message with an identical r9k text is found, <see cref="M:Terministrator.Terministrator.BLL.Rules.Fail(Terministrator.Terministrator.Entites.Message,System.String)"/> them.
            </summary>
            <param name="message">The message to analyze.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.Fail(Terministrator.Terministrator.Entites.Message,System.String)">
            <summary>
            Fails the user due to the specified message. Warn them if they weren't muted, kick them otherwise.
            </summary>
            <param name="message">The message.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.Kick(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Kicks the specified user from the channel if possible. Otherwise warn the mods.
            </summary>
            <param name="userToChannel">The user to channel.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.SendWarningMessages(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Sends a warning message to the mods about someone whom should be kicked.
            </summary>
            <param name="userToChannel">The user to channel to warn about.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.ToR9KText(System.String)">
            <summary>
            Apply the R9K filter to a string.
            </summary>
            <param name="msg">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.RegexReplace(System.String,System.String,System.String)">
            <summary>
            Shorten the use of a regex to replace a pattern in a text.
            </summary>
            <param name="text">The text.</param>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
            <returns>The replaced text.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.GetMuteTime(System.Int32)">
            <summary>
            Calculates the mute time one should get if this is their Nth mute.
            </summary>
            <param name="nbMutes">The nb mutes, greather than 0</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.Create(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Creates the specified rules.
            </summary>
            <param name="rules">The rules.</param>
            <returns>The same rules with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.GetNewModRules">
            <summary>
            Creates a rules object with as few rules as possible.
            </summary>
            <returns>The requested rules</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.GetNewUserRules">
            <summary>
            Creates a rules object with a maximum amount of rules.
            </summary>
            <returns>The requested rules</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.GetRules(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            User command. Gets the rules applied to them.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.SetRules(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Mod command. Sets the rules applying to a privileges group.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Rules.ResetBlockedWords(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Mod command. Resets the blocked words set on a privileges group.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.SimilarTexts">
            <summary>
            Business logic layer of the similar texts. Simply create empty ones and let increment when a new similar message is found.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.SimilarTexts.Create">
            <summary>
            Creates a default SimilarTexts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.SimilarTexts.Increment(System.Int32)">
            <summary>
            Increments the specified similar texts's amount number.
            </summary>
            <param name="similarTextsId">The similar texts identifier.</param>
            <returns>The incremented similar texts.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.Terministrator">
            <summary>
            Business logic layer of Terministartor. Is only used for static answers (no requests to the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Terministrator.Start(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            User command. Always sent when a user open a private discussion with the bot on Telegram.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Terministrator.Help(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            User command. Send every functions with an explanation for each of them.
            </summary>
            <remarks>
            Should add something to explain the bot's goals as well.
            </remarks>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.UserName">
            <summary>
            Business logic layer of the user names. Create and update users upon requests.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserName.GetFromUsername(System.String,System.String)">
            <summary>
            Gets the user name from a string.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="applicationName">Name of the application.</param>
            <returns>The requested user name. Null if nothing found.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserName.ExtractUserName(Terministrator.Application.Interface.IUser,Terministrator.Terministrator.Entites.User)">
            <summary>
            Creates an user name from a iUser's infos and a user's reference.
            </summary>
            <param name="iUser">The iuser.</param>
            <param name="user">The user.</param>
            <returns>The newly created user name.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserName.ExtractUserName(Terministrator.Application.Interface.IChannel,Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Creates an user name from a ichannel's infos and a channel's reference.
            </summary>
            <param name="iChannel">The ichannel.</param>
            <param name="channel">The channel.</param>
            <returns>The newly created user name.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserName.UpdateUserName(Terministrator.Terministrator.Entites.UserName)">
            <summary>
            Switch the old user name to a non-default state and create this one.
            </summary>
            <param name="userName">The user name.</param>
            <returns>The same user name with an updated ID.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.BlockedWord">
            <summary>
            Business logic layer of the blocked words. Currently only gives the default words.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.BlockedWord.GetDefaultBlockedWords">
            <summary>
            Gets the default blocked words from app.config.
            </summary>
            <returns>The requested blocked words collection.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.Application">
            <summary>
            Business logic layer of the applications. Is able to work with IApplication to allow the Application Interface to talk with the database.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Application.GetOrCreate(Terministrator.Application.Interface.IApplication)">
            <summary>
            Gets or create the application.
            </summary>
            <param name="iApplication">The iapplication.</param>
            <returns>The requested/created application.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Application.UpdateOrCreate(Terministrator.Application.Interface.IApplication)">
            <summary>
            Updates or create the application.
            </summary>
            <param name="iApplication">The iapplication.</param>
            <returns>The updated/created application.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Application.Get(Terministrator.Application.Interface.IApplication)">
            <summary>
            Gets the specified application.
            </summary>
            <param name="iApplication">The iapplication.</param>
            <returns>The requested application.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Application.Create(Terministrator.Application.Interface.IApplication)">
            <summary>
            Creates the specified application.
            </summary>
            <param name="iApplication">The iapplication.</param>
            <returns>The newly created application.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Application.Update(Terministrator.Application.Interface.IApplication,Terministrator.Terministrator.Entites.Application)">
            <summary>
            Updates the specified application.
            </summary>
            <param name="iApplication">The iapplication to read from.</param>
            <param name="application">The application to update.</param>
            <returns>The second arguement, updated.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.Message">
            <summary>
            Business logic layer of the messages. Mainly process the switch between an IMessage and a message.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Message.GetOrCreate(Terministrator.Application.Interface.IMessage)">
            <summary>
            Gets or create a message.
            </summary>
            <param name="iMessage">The imessage.</param>
            <returns>The requested/created message.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Message.Get(Terministrator.Application.Interface.IMessage)">
            <summary>
            Gets the related message.
            </summary>
            <param name="iMessage">The imessage.</param>
            <returns>The requested message.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Message.Create(Terministrator.Application.Interface.IMessage)">
            <summary>
            Creates the specified message.
            </summary>
            <param name="iMessage">The imessage.</param>
            <returns>The newly created message.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Message.Create(System.String,Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Creates a new message for a user, in a channel, with a specified text (not in the database).
            </summary>
            <param name="text">The text.</param>
            <param name="userToChannel">The user to channel.</param>
            <returns>The newly created message.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Message.Answer(Terministrator.Terministrator.Entites.Message,System.String)">
            <summary>
            Given a message, make Terministrator answers to it.
            </summary>
            <param name="original">The original message.</param>
            <param name="text">The text.</param>
            <returns>The answering message.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Message.NbMessagesBetween(Terministrator.Terministrator.Entites.Channel,System.DateTime,System.DateTime)">
            <summary>
            Counts the amount of messages between two dates.
            </summary>
            <param name="channel">The channel.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>The amount of messages.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Message.NbMessagesSince(Terministrator.Terministrator.Entites.Channel,System.DateTime)">
            <summary>
            Counts the amount of messages between now and the specified date..
            </summary>
            <param name="channel">The channel.</param>
            <param name="from">From.</param>
            <returns>The amount of messages.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.MessageType">
            <summary>
            Business logic layer of the message types. Makes sure the database is up to date with the set types and gives them on request.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageType.Get(System.String)">
            <summary>
            Gets the specified message type.
            </summary>
            <param name="name">The name.</param>
            <returns>The requested message type.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageType.GetAll">
            <summary>
            Gets all existing message types.
            </summary>
            <returns>The requested collection.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents every available message types.
            </summary>
            <returns>
            A <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageType.Count">
            <summary>
            Counts how many message types exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.MessageType.CreateTypes">
            <summary>
            Creates the default message types.
            </summary>
            <returns>The created message types.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.Text">
            <summary>
            Business logic layer of the texts. Helps searching for r9k texts.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Text.GetR9K(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Gets another text with the same r9k.
            </summary>
            <param name="text">The text.</param>
            <returns>A similar text. Null if nothing found.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Text.Create(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Creates the specified text in the database.
            </summary>
            <param name="text">The text.</param>
            <returns>The same text with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Text.Update(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Updates the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The same text.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Text.SearchAndLink(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Searches another text with the same R9K. If one is found, link this one to their Similar Text.
            </summary>
            <param name="text">The text.</param>
            <returns>The same text with a possibly updated Similar Texts reference.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.Channel">
            <summary>
            Business logic layer of the channels. Processes every functions mainly dealing with channels.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Channel.UpdateOrCreate(Terministrator.Application.Interface.IChannel)">
            <summary>
            Updates or create a channel.
            </summary>
            <param name="iChannel">The ichannel.</param>
            <returns>The requested/created channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Channel.Get(Terministrator.Application.Interface.IChannel)">
            <summary>
            Gets the specified channel.
            </summary>
            <param name="iChannel">The ichannel.</param>
            <returns>The requested channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Channel.Get(Terministrator.Application.Interface.IApplication)">
            <summary>
            Gets every channels followed for an application.
            </summary>
            <param name="application">The application.</param>
            <returns>The collection of channels.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Channel.TopPoster(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Gives the users of a channel in descending order of messages sent.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The collection of user to channel</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Channel.Create(Terministrator.Application.Interface.IChannel)">
            <summary>
            Creates the specified channel.
            </summary>
            <param name="iChannel">The ichannel.</param>
            <returns>The newly created channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Channel.Update(Terministrator.Application.Interface.IChannel,Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Updates the specified channel.
            </summary>
            <param name="iChannel">The ichannel to take the information from.</param>
            <param name="channel">The channel to update.</param>
            <returns>The second arguement, but updated.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Channel.GetPrivateChannel(Terministrator.Terministrator.Entites.User)">
            <summary>
            Gets the private channel with a user.
            </summary>
            <param name="user">The user.</param>
            <returns>The requested channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.Channel.GetTopPosters(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            User command. Answers with every users in the channel ordered (descending) by messages sent.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.User">
            <summary>
            Business logic layer of the users. Create and update users upon requests.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.User.GetOrCreate(Terministrator.Application.Interface.IUser)">
            <summary>
            Gets or create an user.
            </summary>
            <param name="iUser">The iuser.</param>
            <returns>The requested user.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.User.UpdateOrCreate(Terministrator.Application.Interface.IUser)">
            <summary>
            Updates or create an user.
            </summary>
            <param name="iUser">The iuser.</param>
            <returns>The requested user.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.User.Get(Terministrator.Application.Interface.IUser)">
            <summary>
            Gets the specified user.
            </summary>
            <param name="iUser">The iuser.</param>
            <returns>The requested user. Null if nothing found.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.User.Create(Terministrator.Application.Interface.IUser)">
            <summary>
            Creates the specified user.
            </summary>
            <param name="iUser">The iuser.</param>
            <returns>The newly created user.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.User.Update(Terministrator.Application.Interface.IUser,Terministrator.Terministrator.Entites.User)">
            <summary>
            Updates the specified user.
            </summary>
            <param name="iUser">The iuser.</param>
            <param name="user">The user.</param>
            <returns>The same user reference, but updated.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.BLL.UserToChannel">
            <summary>
            Business logic layer of the user to channel. Create and update upon requests. Also does all the working when a single user in a channel is aimed.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.UpdateOrCreate(Terministrator.Application.Interface.IApplication,Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel)">
            <summary>
            Updates or create the user to channel.
            </summary>
            <param name="iApplication">The application.</param>
            <param name="iUser">The user.</param>
            <param name="iChannel">The channel.</param>
            <returns>The user to channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.GetOrCreate(Terministrator.Application.Interface.IApplication,Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel)">
            <summary>
            Gets or create the user to channel.
            </summary>
            <param name="iApplication">The application.</param>
            <param name="iUser">The user.</param>
            <param name="iChannel">The channel.</param>
            <returns>The user to channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.Update(Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel,Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Updates the user to channel with the unique parameters.
            </summary>
            <param name="iUser">The user.</param>
            <param name="iChannel">The channel.</param>
            <param name="userToChannel">The user to channel to update.</param>
            <returns>The same user to channel updated with the two other arguements' properties.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.Get(Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel)">
            <summary>
            Gets the specified user to channel from the unique parameters.
            </summary>
            <param name="iUser">The user.</param>
            <param name="iChannel">The channel.</param>
            <returns>The requested user to channel. Null if none found.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.Create(Terministrator.Application.Interface.IApplication,Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel)">
            <summary>
            Creates the specified user to channel.
            </summary>
            <param name="iApplication">The application.</param>
            <param name="iUser">The user.</param>
            <param name="iChannel">The channel.</param>
            <returns>The newly created uesr to channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.Update(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Updates the specified user to channel.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>The same user to channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.GetMessageBefore(Terministrator.Terministrator.Entites.UserToChannel,System.DateTime)">
            <summary>
            Gets the message sent by the user in that channel just before the requested date.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <param name="date">The date.</param>
            <returns>The requested message.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.GetPoints(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Chat command. Answers with the user's points in that channel.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.AttributePoints(Terministrator.Terministrator.Entites.Message,Terministrator.Terministrator.Core)">
            <summary>
            Attributes the points to a user from the channel's policies. Called upon receiving a new message.
            </summary>
            <param name="message">The message.</param>
            <param name="core">The core.</param>
            <returns>How many points were given to that user.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.GivePoints(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Chat command. Transfert points between a user to another one in the same channel.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.CheckGivePointsArguements(System.String[],System.Single@,Terministrator.Terministrator.Entites.UserToChannel,Terministrator.Terministrator.Entites.UserToChannel@)">
            <summary>
            Checks and extracts the GivePoints arguements.
            </summary>
            <param name="arguements">The arguements.</param>
            <param name="amount">The amount.</param>
            <param name="sender">The sender.</param>
            <param name="receiver">The receiver.</param>
            <returns>An error message. Null if none.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.GetPrivileges(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            User command. Tells the user their privileges group's name.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="M:Terministrator.Terministrator.BLL.UserToChannel.SetPrivileges(Terministrator.Terministrator.Types.Command,Terministrator.Terministrator.Core)">
            <summary>
            Mod command. Sets the privileges group of a user.
            </summary>
            <param name="command">The command.</param>
            <param name="core">The core.</param>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.Ad">
            <summary>
            Data access layer of the ads. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Ad.Create(Terministrator.Terministrator.Entites.Ad)">
            <summary>
            Creates the specified ad.
            </summary>
            <param name="ad">The ad.</param>
            <returns>The same ad with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Ad.Get(System.Int32)">
            <summary>
            Gets the specified ad.
            </summary>
            <param name="adId">The ad identifier.</param>
            <returns>The requested ad.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Ad.Update(Terministrator.Terministrator.Entites.Ad)">
            <summary>
            Updates the specified ad.
            </summary>
            <param name="ad">The ad.</param>
            <returns>The same ad.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Ad.LoadAdSystem(Terministrator.Terministrator.Entites.Ad)">
            <summary>
            Loads the ad system associated to the ad.
            </summary>
            <param name="ad">The ad.</param>
            <returns>The same ad with the ad system reference loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Ad.ClearReferences(Terministrator.Terministrator.Entites.Ad)">
            <summary>
            Clears the references of the ad.
            </summary>
            <param name="ad">The ad system type to ad.</param>
            <returns>A copy of the ad given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Ad.AddReferences(Terministrator.Terministrator.Entites.Ad,Terministrator.Terministrator.Entites.Ad)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="ad">The ad to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.MessageTypeToPointSystem">
            <summary>
            Data access layer of the message type to point systems. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageTypeToPointSystem.Create(Terministrator.Terministrator.Entites.MessageTypeToPointSystem)">
            <summary>
            Creates the specified message type to point system.
            </summary>
            <param name="messageTypeToPointSystem">The message type to point system.</param>
            <returns>The same message type to point system.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageTypeToPointSystem.DeleteAllFrom(System.Int32)">
            <summary>
            Deletes all the message type to point systems from the point system.
            </summary>
            <param name="pointSystemId">The point system identifier.</param>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageTypeToPointSystem.GetAll(System.Int32)">
            <summary>
            Gets all the message type to point systems associated to a point system.
            </summary>
            <param name="pointSystemId">The point system identifier.</param>
            <returns>The requested collection.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageTypeToPointSystem.ClearReferences(Terministrator.Terministrator.Entites.MessageTypeToPointSystem)">
            <summary>
            Clears the references of the message type to point system.
            </summary>
            <param name="messageTypeToPointSystem">The message type to point system.</param>
            <returns>A copy of the message type to point system given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageTypeToPointSystem.AddReferences(Terministrator.Terministrator.Entites.MessageTypeToPointSystem,Terministrator.Terministrator.Entites.MessageTypeToPointSystem)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="messageTypeToPointSystem">The message type to point system to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.PointSystem">
            <summary>
            Data access layer of the point systems. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.PointSystem.Create(Terministrator.Terministrator.Entites.PointSystem)">
            <summary>
            Creates the specified point system.
            </summary>
            <param name="pointSystem">The point system.</param>
            <returns>The same point system with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.PointSystem.Get(System.Int32)">
            <summary>
            Gets the point system linked to the specified channel.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <returns>The point system requested.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.PointSystem.LoadMessageTypes(Terministrator.Terministrator.Entites.PointSystem)">
            <summary>
            Loads the message type collection of the point system..
            </summary>
            <param name="pointSystem">The point system.</param>
            <returns>The same point system with an initialized message type to point system collection.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.PointSystem.ClearReferences(Terministrator.Terministrator.Entites.PointSystem)">
            <summary>
            Clears the references of the point system.
            </summary>
            <param name="pointSystem">The point system.</param>
            <returns>A copy of the point system given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.PointSystem.AddReferences(Terministrator.Terministrator.Entites.PointSystem,Terministrator.Terministrator.Entites.PointSystem)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="pointSystem">The point system to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.Privileges">
            <summary>
            Data access layer of the privileges. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Privileges.Create(Terministrator.Terministrator.Entites.Privileges)">
            <summary>
            Creates the specified privileges.
            </summary>
            <param name="privileges">The privileges.</param>
            <returns>The same privileges with an updated id.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Privileges.Get(System.Int32)">
            <summary>
            Gets the specified privileges.
            </summary>
            <param name="privilegesId">The privileges identifier.</param>
            <returns>The requested privileges.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Privileges.Update(Terministrator.Terministrator.Entites.Privileges)">
            <summary>
            Updates the specified privileges.
            </summary>
            <param name="privileges">The privileges.</param>
            <returns>The same privileges.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Privileges.GetDefaultUser(System.Int32)">
            <summary>
            Gets the default privileges of a channel.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <returns>The requested privileges.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Privileges.GetPrivileges(System.Int32,System.String)">
            <summary>
            Gets the privileges associated to a channel.
            </summary>
            <param name="channelId">The channel identifier (namable).</param>
            <param name="name">The name.</param>
            <returns>The requested privileges.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Privileges.LoadRules(Terministrator.Terministrator.Entites.Privileges)">
            <summary>
            Loads the rules reference.
            </summary>
            <param name="privileges">The privileges.</param>
            <returns>The same privileges with the initialized privileges reference.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Privileges.ClearReferences(Terministrator.Terministrator.Entites.Privileges)">
            <summary>
            Clears the references of the privileges.
            </summary>
            <param name="privileges">The privileges.</param>
            <returns>A copy of the privileges given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Privileges.AddReferences(Terministrator.Terministrator.Entites.Privileges,Terministrator.Terministrator.Entites.Privileges)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="privileges">The privileges to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.Rules">
            <summary>
            Data access layer of the rules. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.Create(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Creates the specified rules.
            </summary>
            <param name="rules">The rules.</param>
            <returns>The same rules with the updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.Get(System.Int32)">
            <summary>
            Gets the specified rules.
            </summary>
            <param name="rulesId">The rules identifier.</param>
            <returns>The rules requested.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.Update(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Updates the specified rules.
            </summary>
            <param name="rules">The rules.</param>
            <returns>The same rules.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.UpdateBlockedWords(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Updates the blocked words.
            </summary>
            <param name="rules">The rules.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.LoadExtensions(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Loads the blocked extensions associated to rules.
            </summary>
            <param name="rules">The rules.</param>
            <returns>The same rules with the blocked extensions collection initialized.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.LoadMessageTypes(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Loads the blocked message types associated to rules.
            </summary>
            <param name="rules">The rules.</param>
            <returns>The same rules with the blocked message types collection initialized.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.LoadBlockedWords(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Loads the blocked words associated to rules.
            </summary>
            <param name="rules">The rules.</param>
            <returns>The same rules with the blocked words collection initialized.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.LoadBlockedDomains(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Loads the blocked domains associated to rules.
            </summary>
            <param name="rules">The rules.</param>
            <returns>The same rules with the blocked domains collection initialized.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.ClearReferences(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Clears the references of the rules.
            </summary>
            <param name="rules">The rules.</param>
            <returns>A copy of the rules given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Rules.AddReferences(Terministrator.Terministrator.Entites.Rules,Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="rules">The rules to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.SimilarTexts">
            <summary>
            Data access layer of the similar texts. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.SimilarTexts.Create(Terministrator.Terministrator.Entites.SimilarTexts)">
            <summary>
            Creates the specified similar text.
            </summary>
            <param name="similarText">The similar text.</param>
            <returns>The similar text with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.SimilarTexts.Get(System.Int32)">
            <summary>
            Gets the specified similar texts.
            </summary>
            <param name="similarTextsId">The similar texts identifier.</param>
            <returns>The specified similar texts</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.SimilarTexts.Update(Terministrator.Terministrator.Entites.SimilarTexts)">
            <summary>
            Updates the specified similar text.
            </summary>
            <param name="similarText">The similar text.</param>
            <returns>The same similar text.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.AdSystem">
            <summary>
            Data access layer of the ad systems. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.AdSystem.Create(Terministrator.Terministrator.Entites.AdSystem)">
            <summary>
            Creates the specified ad system.
            </summary>
            <param name="adSystem">The ad system.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.AdSystem.Update(Terministrator.Terministrator.Entites.AdSystem)">
            <summary>
            Updates the specified ad system.
            </summary>
            <param name="adSystem">The ad system.</param>
            <returns>The same ad system.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.AdSystem.Get(System.Int32)">
            <summary>
            Gets the specified ad system associated to a channel.
            </summary>
            <param name="channelId">The channel identifier (Namable).</param>
            <returns>The requested ad system.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.AdSystem.ClearReferences(Terministrator.Terministrator.Entites.AdSystem)">
            <summary>
            Clears the references of the ad system.
            </summary>
            <param name="adSystem">The ad system.</param>
            <returns>A copy of the ad system given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.AdSystem.AddReferences(Terministrator.Terministrator.Entites.AdSystem,Terministrator.Terministrator.Entites.AdSystem)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="adSystem">The ad system to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.BlockedWord">
            <summary>
            Data access layer of the blocked words. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.BlockedWord.Create(Terministrator.Terministrator.Entites.BlockedWord)">
            <summary>
            Creates the specified blocked word.
            </summary>
            <param name="blockedWord">The blocked word.</param>
            <returns>The same blocked word with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.BlockedWord.Get(System.String)">
            <summary>
            Gets the specified blocked word.
            </summary>
            <param name="word">The word.</param>
            <returns>The requested blocked word.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.Channel">
            <summary>
            Data access layer of the channels. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.Create(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Creates the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The same channel with the updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.Get(System.String,System.String)">
            <summary>
            Gets the specified channel.
            </summary>
            <param name="channelID">The channel identifier (application).</param>
            <param name="application">The application.</param>
            <returns>The requested channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.Get(System.String)">
            <summary>
            Gets all the channels in a given application.
            </summary>
            <param name="application">The application.</param>
            <returns>The requested channel.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.LoadUserNames(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Loads the user names.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The same channel with the user names collection loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.LoadApplication(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Loads the application.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The same channel with the application reference loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.LoadPointSystem(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Loads the point system.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The same channel with the point system reference loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.LoadAdSystem(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Loads the ad system.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The same channel with the ad system reference loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.LoadUsers(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Loads the user to channels.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The same channel with the user to channel collection loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.ClearReferences(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Clears the references of the channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>A copy of the channel given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Channel.AddReferences(Terministrator.Terministrator.Entites.Channel,Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="channel">The channel to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.Application">
            <summary>
            Data access layer of the applications. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Application.Get(System.String)">
            <summary>
            Gets the specified application name.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <returns>The requested application.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Application.Create(Terministrator.Terministrator.Entites.Application)">
            <summary>
            Creates the specified application.
            </summary>
            <param name="application">The application.</param>
            <returns>The same application with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Application.Update(Terministrator.Terministrator.Entites.Application)">
            <summary>
            Updates the specified application.
            </summary>
            <param name="application">The application.</param>
            <returns>The same application</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.Message">
            <summary>
            Data access layer of the messages. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.Create(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Creates the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns>The same message with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.Get(System.String,System.String)">
            <summary>
            Gets the specified message.
            </summary>
            <param name="messageID">The message identifier (for the application).</param>
            <param name="application">The application.</param>
            <returns>The requested message. Null if none found.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.NbMessagesBetween(System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            Count the messages between two dates.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="deb">The start date (inclusive).</param>
            <param name="fin">The end date (exclusive).</param>
            <returns>The number of messages.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.LoadUserToChannel(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Loads the user to channel of a message.
            </summary>
            <param name="message">The message.</param>
            <returns>The same message with the user to channel loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.LoadTexts(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Loads the text collection of a message.
            </summary>
            <param name="message">The message.</param>
            <returns>The same message with the text collection loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.LoadApplication(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Loads the application of the message.
            </summary>
            <param name="message">The message.</param>
            <returns>The same message with the application instance initialized.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.LoadRepliesTo(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Loads the message being replied to.
            </summary>
            <param name="message">The message.</param>
            <returns>The same message with the replied message loaded.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.ClearReferences(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Clears the references of the message.
            </summary>
            <param name="message">The message.</param>
            <returns>A copy of the message given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Message.AddReferences(Terministrator.Terministrator.Entites.Message,Terministrator.Terministrator.Entites.Message)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="message">The message to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.MessageType">
            <summary>
            Data access layer of the message types. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageType.Create(Terministrator.Terministrator.Entites.MessageType)">
            <summary>
            Creates the specified message type.
            </summary>
            <param name="messageType">Type of the message.</param>
            <returns>The same message type with an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageType.Update(Terministrator.Terministrator.Entites.MessageType)">
            <summary>
            Updates the name of the specified message type.
            </summary>
            <param name="messageType">Type of the message.</param>
            <returns>The same message type.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageType.Get(System.String)">
            <summary>
            Gets the specified message type.
            </summary>
            <param name="name">The name of the requested message type.</param>
            <returns>The requested message type.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageType.GetAll">
            <summary>
            Gets all message types.
            </summary>
            <returns>The collection of message types.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageType.Count">
            <summary>
            Counts how many message types there are.
            </summary>
            <returns>The amount of message types.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.MessageType.DeleteAll">
            <summary>
            Deletes all message types from the database.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.Text">
            <summary>
            Data access layer of the texts. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Text.Create(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Creates the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The same text with an updated id.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Text.Get(System.Int32)">
            <summary>
            Gets the specified text.
            </summary>
            <param name="textId">The text identifier.</param>
            <returns>The text with the specified identifier.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Text.Update(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Updates the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The same text given in arguement.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Text.GetR9K(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Gets a text with the same r9k as the given text.
            </summary>
            <param name="text">The text.</param>
            <returns>A text with the same r9k. Null if none found.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Text.LoadSimilarTexts(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Loads the similar texts reference.
            </summary>
            <param name="text">The text.</param>
            <returns>The same text with the reference updated.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Text.ClearReferences(Terministrator.Terministrator.Entites.Text)">
            <summary>
            Clears the references of the text.
            </summary>
            <param name="text">The user.</param>
            <returns>A copy of the text given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.Text.AddReferences(Terministrator.Terministrator.Entites.Text,Terministrator.Terministrator.Entites.Text)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="text">The text to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.User">
            <summary>
            Data access layer of the users. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.User.Create(Terministrator.Terministrator.Entites.User)">
            <summary>
            Creates the specified user.
            </summary>
            <param name="user">The user.</param>
            <returns>The same user with an updated id.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.User.Get(System.String,System.String)">
            <summary>
            Gets the specified user identifier.
            </summary>
            <param name="userID">The user identifier (for the application).</param>
            <param name="application">The application name.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.User.LoadUserNames(Terministrator.Terministrator.Entites.User)">
            <summary>
            Loads the user names of the user.
            </summary>
            <param name="user">The user.</param>
            <returns>The same user with an initialized user name collection.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.User.LoadChannels(Terministrator.Terministrator.Entites.User)">
            <summary>
            Loads the channels collection of the user.
            </summary>
            <param name="user">The user.</param>
            <returns>The same user with an initialized channel collection.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.User.ClearReferences(Terministrator.Terministrator.Entites.User)">
            <summary>
            Clears the references of the user.
            </summary>
            <param name="user">The user.</param>
            <returns>A copy of the user given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.User.AddReferences(Terministrator.Terministrator.Entites.User,Terministrator.Terministrator.Entites.User)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="user">The user to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.UserName">
            <summary>
            Data access layer of the user names. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserName.GetFromUsername(System.String,System.String)">
            <summary>
            Find whom in the application has that username.
            </summary>
            <param name="username">The username.</param>
            <param name="application">The application.</param>
            <returns>The user name. Null if none found.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserName.GetAll(System.String,System.String)">
            <summary>
            For an applicationReferencableId and the application's id, find all the user names associated to a user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="application">The application.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserName.Create(Terministrator.Terministrator.Entites.UserName)">
            <summary>
            Creates the specified user name.
            </summary>
            <param name="userName">The user name.</param>
            <returns>The same user name with the id updated.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserName.UpdateUserName(System.Int32)">
            <summary>
            Switch the user name to a non-current state.
            </summary>
            <param name="ownedById">The user identifier.</param>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserName.LoadOwnedBy(Terministrator.Terministrator.Entites.UserName)">
            <summary>
            Loads the owner of the user name.
            </summary>
            <param name="userName">The user name.</param>
            <returns>The same user name but with the owner referenced.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserName.ClearReferences(Terministrator.Terministrator.Entites.UserName)">
            <summary>
            Clears the references of the user name.
            </summary>
            <param name="userName">The user name.</param>
            <returns>A copy of the user name given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserName.AddReferences(Terministrator.Terministrator.Entites.UserName,Terministrator.Terministrator.Entites.UserName)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="userName">The user to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.UserToChannel">
            <summary>
            Data access layer of the user to channels. Process every exchanges with Entity-Framework (AKA the database).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.Exists(System.String,System.String,System.String)">
            <summary>
            Tells if the user to channel with these unique values exists in the database.
            </summary>
            <param name="userID">The user identifier.</param>
            <param name="channelID">The channel identifier.</param>
            <param name="applicationName">Name of the application.</param>
            <returns><c>true</c> if the UserToChannel exist; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.Exists(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Tells if the user to channel exists in the database.
            </summary>
            <param name="userToChannel">The user identifier.</param>
            <returns><c>true</c> if the UserToChannel exist; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.Create(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Creates the specified user to channel in the database.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>The user to channel witn an updated ID.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.Update(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Updates the specified user to channel in the database.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>The same user to channel that was given in entry.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.Get(System.String,System.String,System.String)">
            <summary>
            Gets the specified user to channel from database.
            </summary>
            <param name="userID">The user identifier.</param>
            <param name="channelID">The channel identifier.</param>
            <param name="applicationName">Name of the application.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.GetMessageBefore(System.Int32,System.DateTime)">
            <summary>
            Gets the first message sent before the specified date in the specified channel.
            </summary>
            <param name="userToChannelId">The user to channel identifier.</param>
            <param name="sent">The date to compare with.</param>
            <returns>The first message found. Null if none was found.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.CountMessage(System.Int32)">
            <summary>
            Counts the number of messages a user sent in a channel.
            </summary>
            <param name="userToChannelId">The user to channel identifier.</param>
            <returns>The number of messages a user sent in a channel</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.LoadMessage(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Loads the message collection.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>The user to channel with the initialized message collection.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.LoadUser(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Loads the user reference.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>The user to channel with the initialized user reference.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.LoadChannel(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Loads the channel reference.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>The user to channel with the initialized channel reference.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.LoadPrivileges(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Loads the privileges reference.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>The user to channel with the initialized privileges reference.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.ClearReferences(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Clears the references of the user to channel.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>A copy of the user to channel given in entry with only the references.</returns>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.UserToChannel.AddReferences(Terministrator.Terministrator.Entites.UserToChannel,Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Adds the references of the second arguement in the first one.
            </summary>
            <param name="userToChannel">The user to channel to add the references in.</param>
            <param name="reference">The references.</param>
            <returns>The first arguement.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.DAL.TerministratorContext">
            <summary>
            Context with the database. Managed (and obligatory) by Entity-Framework. 
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.DAL.TerministratorContext.Ping">
            <summary>
            Pings the database.
            </summary>
            <returns>The time necessary to ping. Null if no connection.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.Types.Command">
            <summary>
            Used to hold the information of a command when a message is found to be one.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Command.#ctor(Terministrator.Terministrator.Entites.Message,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Types.Command"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="name">The name.</param>
            <param name="arguement">The arguement.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Command.SplitArguements(System.Char,System.Int32)">
            <summary>
            Splits the arguements.
            </summary>
            <param name="separator">The separator.</param>
            <param name="count">How many strings expected.</param>
            <returns></returns>
        </member>
        <member name="T:Terministrator.Terministrator.Types.Logger">
            <summary>
            Log the requested data in the designated places.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Types.Logger.Rating">
            <summary>
            Defines the log level of the message.
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Logger.Rating.Noisy">
            <summary>
            Nearly useless information
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Logger.Rating.Information">
            <summary>
            Nice to know information
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Logger.Rating.Warning">
            <summary>
            Important information
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Logger.Rating.Error">
            <summary>
            Critical information
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Logger.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Terministrator.Terministrator.Types.Logger"/> class from being created.
            </summary>
        </member>
        <member name="P:Terministrator.Terministrator.Types.Logger.LoggerInstance">
            <summary>
            Get the instance of the logger.
            </summary>
        </member>
        <member name="P:Terministrator.Terministrator.Types.Logger.IsNoisy">
            <summary>
            Gets or sets a value indicating whether this instance is noisy. If it's not, it will ignores the calls to LogNoisy. 
            </summary>
            <value>
              <c>true</c> if this instance is noisy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Logger.LogNoisy(System.String,System.Int32,System.String,System.String)">
            <summary>
            Logs the noisy.
            </summary>
            <param name="str">The string.</param>
            <param name="lineNumber">The line number.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Logger.LogInformation(System.String,System.Int32,System.String,System.String)">
            <summary>
            Logs the information.
            </summary>
            <param name="str">The string.</param>
            <param name="lineNumber">The line number.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Logger.LogWarning(System.String,System.Int32,System.String,System.String)">
            <summary>
            Logs the warning.
            </summary>
            <param name="str">The string.</param>
            <param name="lineNumber">The line number.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Logger.LogWarning(System.Exception,System.String,System.Int32,System.String,System.String)">
            <summary>
            Logs the warning.
            </summary>
            <param name="e">The exception.</param>
            <param name="str">The string.</param>
            <param name="lineNumber">The line number.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Logger.LogError(System.String,System.Int32,System.String,System.String)">
            <summary>
            Logs the error.
            </summary>
            <param name="str">The string.</param>
            <param name="lineNumber">The line number.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Logger.LogError(System.Exception,System.String,System.Int32,System.String,System.String)">
            <summary>
            Logs the error.
            </summary>
            <param name="e">The exception.</param>
            <param name="str">The string.</param>
            <param name="lineNumber">The line number.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Logger.OnLoggingRequested(Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs)">
            <summary>
            Raises the <see cref="E:LoggingRequested" /> event.
            </summary>
            <param name="e">The <see cref="T:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Terministrator.Terministrator.Types.Logger.LoggingRequested">
            <summary>
            Occurs when logging is requested.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs">
            <summary>
            Contains the data this was called with.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs.Rating">
            <summary>
            Gets or sets the rating.
            </summary>
            <value>
            The rating.
            </value>
        </member>
        <member name="P:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs.CallerLineNumber">
            <summary>
            Gets or sets the caller line number.
            </summary>
            <value>
            The caller line number.
            </value>
        </member>
        <member name="P:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs.CallerMemberName">
            <summary>
            Gets or sets the name of the caller member.
            </summary>
            <value>
            The name of the caller member.
            </value>
        </member>
        <member name="P:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs.CallerFilePath">
            <summary>
            Gets or sets the caller file path.
            </summary>
            <value>
            The caller file path.
            </value>
        </member>
        <member name="T:Terministrator.Terministrator.Types.Regex">
            <summary>
            Holds the regexes to find and replace text. Should be in the app.config in the future.
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.ControlCharacters">
            <summary>
            The control characters
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.ControlCharactersReplace">
            <summary>
            The control characters replacement
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.Smileys">
            <summary>
            The smileys
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.SmileysReplace">
            <summary>
            The smileys replacement
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.Quote">
            <summary>
            The quote
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.QuoteReplace">
            <summary>
            The quote replacement
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.Tiret">
            <summary>
            The tiret
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.TiretReplace">
            <summary>
            The tiret replacement
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.RepeatingChar">
            <summary>
            The repeating character
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.RepeatingCharReplace">
            <summary>
            The repeating character replacement
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.RepeatingChars">
            <summary>
            The repeating chars
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.RepeatingCharsReplace">
            <summary>
            The repeating chars replacement
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.Spaces">
            <summary>
            The spaces
            </summary>
        </member>
        <member name="F:Terministrator.Terministrator.Types.Regex.SpacesReplace">
            <summary>
            The spaces replacement
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Types.Tools">
            <summary>
            Some handy tools that don't really find their place elsewhere in the code.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Tools.IsMod(Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Determines whether the specified user to channel is mod.
            </summary>
            <param name="userToChannel">The user to channel.</param>
            <returns>
              <c>true</c> if the specified user to channel is mod; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Types.Tools.IsNotModThenSendWarning(Terministrator.Terministrator.Types.Command)">
            <summary>
            Determines whether the user sending the command is not an mod. If so, warn them.
            </summary>
            <param name="command">The command.</param>
            <returns>
              <c>true</c> if is not mod; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Terministrator.Terministrator.View.MainConsole">
            <summary>
            The main console to administrate Terministrator.
            </summary>
            <seealso cref="T:System.Windows.Forms.Form" />
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.#ctor(System.Action{Terministrator.Terministrator.Entites.Message})">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.View.MainConsole"/> class.
            </summary>
            <param name="sendMessage">The send message.</param>
        </member>
        <member name="P:Terministrator.Terministrator.View.MainConsole.MessagesSent">
            <summary>
            Gets or sets the messages sent.
            </summary>
            <value>
            The messages sent.
            </value>
        </member>
        <member name="P:Terministrator.Terministrator.View.MainConsole.MessagesReceived">
            <summary>
            Gets or sets the messages received.
            </summary>
            <value>
            The messages received.
            </value>
        </member>
        <member name="P:Terministrator.Terministrator.View.MainConsole.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>
            The points.
            </value>
        </member>
        <member name="P:Terministrator.Terministrator.View.MainConsole.MonitoredChannels">
            <summary>
            Gets the monitored channels.
            </summary>
            <value>
            The monitored channels.
            </value>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.RadioButton_Channel_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the RadioButton_Channel control. Refresh the available channels when it happens.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.RefreshChannelUserDataSource">
            <summary>
            Refreshes list of channel.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.ControlAccess(System.Windows.Forms.Control,System.Action)">
            <summary>
            Controls the access on a control over multiple threads.
            </summary>
            <param name="control">The control.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.SetLabel(System.Windows.Forms.Label,System.String)">
            <summary>
            Wrapper to set a label.
            </summary>
            <param name="label">The label.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.UpdateUpTime(System.TimeSpan)">
            <summary>
            Updates since how long the application has been running.
            </summary>
            <param name="upTime">Up time.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.UpdateUpSince(System.DateTime)">
            <summary>
            Updates since when the appplication has been running.
            </summary>
            <param name="upSince">Up since.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.RefreshPing(System.Int32,System.Nullable{System.Int64})">
            <summary>
            Refreshes the ping of the selected index.
            </summary>
            <param name="index">The index.</param>
            <param name="ping">The ping.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.Button_Send_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the Button_Send control. Send what was written in the third tab's box.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.BuildMessage">
            <summary>
            Builds a message sent with the third tab.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.AddMessage(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Adds the message in the third tab.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.ComboBox_ChannelUser_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the ComboBox_ChannelUser control. Shows the new channel in the text box when it happens.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.ComboBox_Application_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the comboBox_Application control. Refreshes the available channels when it happens.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.AddClient(Terministrator.Terministrator.Entites.Application)">
            <summary>
            Adds the client to the third tab.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.AddChannels(System.Collections.Generic.List{Terministrator.Terministrator.Entites.Channel})">
            <summary>
            Adds the channels.
            </summary>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.AddChannel(Terministrator.Terministrator.Entites.Channel)">
            <summary>
            Adds the channel in the third tab and count it in the first one.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.Log(System.Object,Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs)">
            <summary>
            Logs the specified data.
            </summary>
            <param name="logger">The logger.</param>
            <param name="args">The <see cref="T:Terministrator.Terministrator.Types.Logger.LoggingRequestedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.RatingToString(Terministrator.Terministrator.Types.Logger.Rating)">
            <summary>
            Change the enum to a showable string.
            </summary>
            <param name="rating">The rating.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.GetPaddedRating(System.String)">
            <summary>
            Gets the padded rating.
            </summary>
            <param name="rating">The rating.</param>
            <returns></returns>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.Log(System.String)">
            <summary>
            Logs the specified string in the second tab.
            </summary>
            <param name="str">The string.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.Button_Clear_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the button_Clear control. Clears the logs on the second tab.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Terministrator.Terministrator.View.MainConsole.components">
            <summary>
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.Dispose(System.Boolean)">
            <summary>
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing">true si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:Terministrator.Terministrator.View.MainConsole.InitializeComponent">
            <summary>
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Core">
            <summary>
            The core of the application. Distributes the commands and messages when receiving some.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Core.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Core"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Core.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Core.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Core.UpdateUpTime(System.Object)">
            <summary>
            Updates the up time in the console.
            </summary>
            <param name="obj">The datetime to compare with.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Core.RefreshPings(System.Object)">
            <summary>
            Refreshes the pings in the console.
            </summary>
            <param name="obj">Unused.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Core.Register(Terministrator.Application.Interface.IApplication)">
            <summary>
            Registers the specified application to start with the core.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Core.SendMessage(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Sends the message before treating it if needed.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Core.ReceiveMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Receives the message.
            </summary>
            <param name="iMessage">The message.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Core.LoadMessageChilds(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Loads the subclasses from the message.
            </summary>
            <remarks>
            This is a time eater; should ultimately all be moved in a single transaction
            </remarks>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Core.DispatchMessage(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Dispatches the message to different methods waiting new messages.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Core.CommandAnalyzer(Terministrator.Terministrator.Entites.Message)">
            <summary>
            Parses the text and see if it's a command; if so calls the linked method.
            </summary>
            <param name="message">The message.</param>
            <returns><c>true</c> if it was a command; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Ad">
            <summary>
            Entity of the ad. Contains all the datas required for an ad.
            These are shown on the channels following said channel's <see cref="P:Terministrator.Terministrator.Entites.Ad.AdSystem"/> requirements.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Ad.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Ad"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Ad.#ctor(System.Int32,System.String,System.DateTime,Terministrator.Terministrator.Entites.Message,Terministrator.Terministrator.Entites.AdSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Ad"/> class.
            </summary>
            <param name="maxShow">The maximum show.</param>
            <param name="name">The name.</param>
            <param name="lastSent">The last sent.</param>
            <param name="message">The message.</param>
            <param name="adSystem">The ad system.</param>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.AdSystem">
            <summary>
            Entity of the ad system. Contains all the datas required for an ad system.
            These set the rules for a channel's <see cref="P:Terministrator.Terministrator.Entites.AdSystem.Ad"/>.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.AdSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.AdSystem"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.AdSystem.#ctor(Terministrator.Terministrator.Entites.Channel,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.AdSystem"/> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="minNbOfMesage">The minimum nb of mesage.</param>
            <param name="minTime">The minimum time.</param>
            <param name="bothConditions">if set to <c>true</c> [both conditions].</param>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.BlockedWord">
            <summary>
            Entity of the blocked words. Contains all the datas required for a blocked word.
            Pretty much only the word itself.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.BlockedWord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.BlockedWord"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.BlockedWord.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.BlockedWord"/> class.
            </summary>
            <param name="word">The word.</param>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Channel">
            <summary>
            Entity of the channels. Contains all the datas required for a channel.
            </summary>
            <seealso cref="T:Terministrator.Terministrator.Entites.Namable" />
            <seealso cref="T:Terministrator.Application.Interface.IChannel" />
        </member>
        <member name="T:Terministrator.Terministrator.Entites.ApplicationReferencable">
            <summary>
            Dictates that its childs can be referenced on an application with an id.
            Eg: the message 432267 on Telegram is unique.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Application">
            <summary>
            Entity of the applications. Contains all the datas required for an application.
            These calls the ApplicationFactory to know which application they represent and let the code call directly said application.
            Eg: Send a message to an application we just fetched from the database.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Application"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Application"/> class.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="commandSymbols">The command symbols.</param>
            <param name="userSymbols">The user symbols.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.GetApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
            <returns>
            The name of the application.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.SetMessageDestination(System.Action{Terministrator.Application.Interface.IMessage})">
            <summary>
            Sets the message destination.
            </summary>
            <param name="receivedMessage">The received message method.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.SendMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <returns>
            A task containing the ID of the message sent.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.EditMessage(Terministrator.Application.Interface.IMessage)">
            <summary>
            Edits the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.GetTerministrator">
            <summary>
            Gets the terministrator.
            </summary>
            <returns>
            Gets the user Terministrator on the application.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.CanKick(Terministrator.Application.Interface.IChannel)">
            <summary>
            Determines whether this instance can kick the specified user.
            </summary>
            <param name="channel">The channel.</param>
            <returns>
              <c>true</c> if this instance can kick the specified user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.Kick(Terministrator.Application.Interface.IUser,Terministrator.Application.Interface.IChannel)">
            <summary>
            Kicks the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.GetMods(Terministrator.Application.Interface.IChannel)">
            <summary>
            Gets the mods of the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>
            A collection of user which are moderators.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.Ping(System.Nullable{System.TimeSpan})">
            <summary>
            Pings the application.
            </summary>
            <param name="max">The maximum time a ping can take.</param>
            <returns>
            The time necessary to ping. Null if no connection.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.GetCommandSymbol">
            <summary>
            Gets the command symbol.
            </summary>
            <returns>
            The command symbol.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.GetUserSymbol">
            <summary>
            Gets the user symbol.
            </summary>
            <returns>
            The user symbol.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Application.GetApplication">
            <summary>
            Gets the application (from the application factory).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Currencies">
            <summary>
            Entity of the currencies. Contains all the datas required for a currency.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Domain">
            <summary>
            Entity of the domains. Contains all the datas required for a domain name.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Extension">
            <summary>
            Entity of the extensions. Contains all the datas required for a file extension.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.ExtensionCategory">
            <summary>
            Entity of the extension categories. Contains all the datas required for an extension category.
            Eg: Image, Text, Video, etc.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Link">
            <summary>
            Entity of the links. Contains all the datas required for a link sent by a user.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Message">
            <summary>
            Entity of the messages. Contains all the datas required for a message.
            </summary>
            <seealso cref="T:Terministrator.Terministrator.Entites.ApplicationReferencable" />
            <seealso cref="T:Terministrator.Application.Interface.IMessage" />
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Message"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.#ctor(Terministrator.Terministrator.Entites.Application,System.String,System.DateTime,Terministrator.Terministrator.Entites.UserToChannel,Terministrator.Terministrator.Entites.MessageType,Terministrator.Terministrator.Entites.Message,System.Boolean,Terministrator.Terministrator.Entites.UserToChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Message"/> class.
            </summary>
            <param name="application">The application.</param>
            <param name="idMessageForApplication">The identifier message for application.</param>
            <param name="sentOn">The sent on.</param>
            <param name="userToChannel">The user to channel.</param>
            <param name="messageType">Type of the message.</param>
            <param name="repliesTo">The replies to.</param>
            <param name="deleted">if set to <c>true</c> [deleted].</param>
            <param name="joinedUser">The joined user.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.GetApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
            <returns>
            The application identifier
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.GetFrom">
            <summary>
            Gets the author of the message.
            </summary>
            <returns>
            The author
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.GetChannel">
            <summary>
            Gets the channel.
            </summary>
            <returns>
            The channel
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.GetSentDate">
            <summary>
            Gets the sent date.
            </summary>
            <returns>
            The sent date
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.GetText">
            <summary>
            Gets the text.
            </summary>
            <returns>
            The text
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.GetRepliesTo">
            <summary>
            Gets the message replied by this one.
            </summary>
            <returns>
            The message being replied to
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.GetJoinedUser">
            <summary>
            Gets the joined user.
            </summary>
            <returns>
            The joinded user
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Message.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.MessageType">
            <summary>
            Entity of the message types. Contains all the datas required for a message type.
            Eg: Text, SystemMessage, File, Emote, etc.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.MessageType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.MessageType"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.MessageType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.MessageType"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.MessageTypeToPointSystem">
            <summary>
            Entity of the message type to point systems.
            Contains all the datas required for a point reward between a message type and a point system (so a channel).
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.MessageTypeToPointSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.MessageTypeToPointSystem"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.MessageTypeToPointSystem.#ctor(Terministrator.Terministrator.Entites.PointSystem,Terministrator.Terministrator.Entites.MessageType,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.MessageTypeToPointSystem"/> class.
            </summary>
            <param name="pointSystem">The point system.</param>
            <param name="messageType">Type of the message.</param>
            <param name="reward">The reward.</param>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Namable">
            <summary>
            Says that an entity can hold a username. This let us keep track of the history of usernames if they're changed.
            </summary>
            <seealso cref="T:Terministrator.Terministrator.Entites.ApplicationReferencable" />
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Namable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Namable"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Namable.#ctor(Terministrator.Terministrator.Entites.Application,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Namable"/> class.
            </summary>
            <param name="application">The application.</param>
            <param name="idForApplication">The identifier for application.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Namable.GetFirstName">
            <summary>
            Gets the first name of the current <see cref="T:Terministrator.Terministrator.Entites.UserName"/>.
            </summary>
            <returns>The first name</returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Namable.GetLastName">
            <summary>
            Gets the last name of the current <see cref="T:Terministrator.Terministrator.Entites.UserName"/>.
            </summary>
            <returns>The last name</returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Namable.GetUsername">
            <summary>
            Gets the username of the current <see cref="T:Terministrator.Terministrator.Entites.UserName"/>.
            </summary>
            <returns>The username</returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Namable.GetCurrentUserName">
            <summary>
            Gets the current <see cref="T:Terministrator.Terministrator.Entites.UserName"/> of the user.
            </summary>
            <returns>The current UserName</returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Namable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.PointsLog">
            <summary>
            Entity of the point logs. Contains all the datas required for logging an activity on a user's points, in a channel.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.PointsLogReason">
            <summary>
            Entity of the points log reasons. Contains all the datas required for a reason of a change in the points been logged.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.PointSystem">
            <summary>
            Entity of the point system. Contains all the datas required for the rules applied to points, on a channel.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Privileges">
            <summary>
            Entity of the privileges. Contains all the datas required for the different privileges on a channel.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Privileges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Privileges"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Privileges.#ctor(System.String,System.Boolean,Terministrator.Terministrator.Entites.Channel,Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Privileges"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultUser">if set to <c>true</c> [default user].</param>
            <param name="channel">The channel.</param>
            <param name="rules">The rules.</param>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Rules">
            <summary>
            Entity of the rules. Contains all the datas required for a privilege's rules to be set on users.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Rules.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Rules"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Rules.#ctor(System.Nullable{System.TimeSpan},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.Rules"/> class.
            </summary>
            <param name="spamDelay">The spam delay.</param>
            <param name="extensionBlocked">if set to <c>true</c> [extension blocked].</param>
            <param name="domainBlocked">if set to <c>true</c> [domain blocked].</param>
            <param name="messageTypeBlocked">if set to <c>true</c> [message type blocked].</param>
            <param name="blockedWordsEnabled">if set to <c>true</c> [blocked words enabled].</param>
            <param name="r9kEnabled">if set to <c>true</c> [R9K enabled].</param>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Rules.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.Rules.Copy(Terministrator.Terministrator.Entites.Rules)">
            <summary>
            Copies the specified rules.
            </summary>
            <param name="copy">The copy.</param>
            <returns>A new Rules object</returns>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.SimilarTexts">
            <summary>
            Entity of the similar texts. Contains all the datas required for a texts that are the same to point on.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.SimilarTexts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.SimilarTexts"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.SimilarTexts.#ctor(System.Int32,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.SimilarTexts"/> class.
            </summary>
            <param name="nbSimilar">The nb similar.</param>
            <param name="lastIncrement">The last increment.</param>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.File">
            <summary>
            Entity of the files. Contains all the datas required for a file sent by a user on an application.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.Text">
            <summary>
            Entity of the texts. Contains all the datas required for a text that was contained in a message.
            </summary>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.User">
            <summary>
            Entity of the user. Contains all the datas required for a user.
            </summary>
            <seealso cref="T:Terministrator.Terministrator.Entites.Namable" />
            <seealso cref="T:Terministrator.Application.Interface.IUser" />
        </member>
        <member name="T:Terministrator.Terministrator.Entites.UserName">
            <summary>
            Entity of the user names. Contains all the datas required for a user name of a namable.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.UserName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.UserName"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.UserName.#ctor(System.String,System.String,System.String,System.Boolean,System.DateTime,Terministrator.Terministrator.Entites.Namable)">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.UserName"/> class.
            </summary>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="username">The username.</param>
            <param name="current">if set to <c>true</c> [current].</param>
            <param name="changedOn">The changed on.</param>
            <param name="ownedBy">The owned by.</param>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.UserName.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Terministrator.Terministrator.Entites.UserToChannel">
            <summary>
            Entity of the user to channels. Contains all the datas required for the information specific to a user on a single channel.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.UserToChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.UserToChannel"/> class.
            </summary>
        </member>
        <member name="M:Terministrator.Terministrator.Entites.UserToChannel.#ctor(Terministrator.Terministrator.Entites.Application,Terministrator.Terministrator.Entites.User,Terministrator.Terministrator.Entites.Channel,System.DateTime,Terministrator.Terministrator.Entites.Privileges,System.Single,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Terministrator.Terministrator.Entites.UserToChannel"/> class.
            </summary>
            <param name="application">The application.</param>
            <param name="user">The user.</param>
            <param name="channel">The channel.</param>
            <param name="joinedOn">The joined on.</param>
            <param name="privileges">The privileges.</param>
            <param name="points">The points.</param>
            <param name="nbSilences">The nb silences.</param>
            <param name="silencedTo">The silenced to.</param>
        </member>
        <member name="M:Terministrator.Program.Main">
            <summary>
            Point d'entrée principal de l'application.
            </summary>
        </member>
        <member name="T:Terministrator.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:Terministrator.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:Terministrator.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
    </members>
</doc>
